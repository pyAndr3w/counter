#include "imports/stdlib.fc";
#include "auto/scheme.fc";

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global int ctx_counter;


;; load_data populates storage variables using stored data
() load_data() impure inline {
    slice ds = get_data().begin_parse();
    [ctx_id, ctx_counter] = ds~Data::_::parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure inline {
    set_data(Data::_::store(begin_cell(), [ctx_id, ctx_counter]).end_cell());
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_msg_flags();
    if (flags.bounced?()) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    if (in_msg_body~slice_begins_with?(op::increase)) {
        [int query_id, int increase_by] = in_msg_body~InternalMsgBody::increase::parse();
        ctx_counter += increase_by;
        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

int get_counter() method_id {
    load_data();
    return ctx_counter;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}
