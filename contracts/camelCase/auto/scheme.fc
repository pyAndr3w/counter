// This file is generated by TLB compiler. Do not edit it manually.
#pragma version >=0.4.0;
#include "../imports/stdlib.fc";

const slice op::increase = "7e8764ef"s;

(int, int) tlb::getSizeBySkip(slice cs, ((slice) -> slice) skip) inline {
    (int beforeBits, int beforeRefs) = cs.sliceBitsRefs();
    slice newSlice = skip(cs);
    (int afterBits, int afterRefs) = newSlice.sliceBitsRefs();
    return (beforeBits - afterBits, beforeRefs - afterRefs);
}

(slice) tlb::skip(slice cs, ((slice) -> (int, int)) getSize) inline {
    (int bits, int refs) = getSize(cs);
    cs~sliceSplit(bits, refs);
    return cs;
}

(slice, slice) tlb::load(slice cs, ((slice) -> (int, int)) getSize) inline {
    (int bits, int refs) = getSize(cs);
    return cs.sliceSplit(bits, refs);
}

(slice) Data::skip(slice cs) inline;

(int, int) Data::get_size(slice cs) inline {
    return (64, 0);
}

(slice, slice) Data::load(slice cs) inline {
    return tlb::load(cs, Data::get_size);
}

(slice) Data::_::skip(slice cs) inline {
    cs~skipBits(64);
    return cs;
}

(slice, [
    int,   // id : (uint32)
    int    // counter : (uint32)
]) Data::_::parse(slice cs) inline {
    var id = cs~loadUint(32);
    var counter = cs~loadUint(32);
    return (cs, [id, counter]);
}

builder Data::_::store(builder cb, [
    int,   // id : (uint32)
    int    // counter : (uint32)
] data) inline {
    var [id, counter] = data;
    cb = cb.storeUint(id, 32);
    cb = cb.storeUint(counter, 32);
    return cb;
}

(slice) Data::skip(slice cs) inline {
    if cs~isSliceBeginsWith(""s) {
        return Data::_::skip(cs);
    }
    return cs;
}

(slice) InternalMsgBody::skip(slice cs) inline;

(int, int) InternalMsgBody::get_size(slice cs) inline {
    return (128, 0);
}

(slice, slice) InternalMsgBody::load(slice cs) inline {
    return tlb::load(cs, InternalMsgBody::get_size);
}

(slice) InternalMsgBody::increase::skip(slice cs) inline {
    cs~skipBits(96);
    return cs;
}

(slice, [
    int,   // query_id : (uint64)
    int    // increase_by : (uint32)
]) InternalMsgBody::increase::parse(slice cs) inline {
    var queryId = cs~loadUint(64);
    var increaseBy = cs~loadUint(32);
    return (cs, [queryId, increaseBy]);
}

builder InternalMsgBody::increase::store(builder cb, [
    int,   // query_id : (uint64)
    int    // increase_by : (uint32)
] data) inline {
    var [queryId, increaseBy] = data;
    cb = cb.storeUint(queryId, 64);
    cb = cb.storeUint(increaseBy, 32);
    return cb;
}

(slice) InternalMsgBody::skip(slice cs) inline {
    if cs~isSliceBeginsWith(op::increase) {
        return InternalMsgBody::increase::skip(cs);
    }
    return cs;
}
