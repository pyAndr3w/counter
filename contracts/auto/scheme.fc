;; This file is generated by TLB compiler. Do not edit it manually.
#pragma version >=0.4.0;
#include "../imports/stdlib.fc";

const slice op::increase = "7e8764ef"s;

(int, int) tlb::get_size_by_skip(slice cs, ((slice) -> slice) skip) inline {
    (int before_bits, int before_refs) = cs.slice_bits_refs();
    slice new_slice = skip(cs);
    (int after_bits, int after_refs) = new_slice.slice_bits_refs();
    return (before_bits - after_bits, before_refs - after_refs);
}

(slice) tlb::skip(slice cs, ((slice) -> (int, int)) get_size) inline {
    (int bits, int refs) = get_size(cs);
    cs~slice_split(bits, refs);
    return cs;
}

(slice, slice) tlb::load(slice cs, ((slice) -> (int, int)) get_size) inline {
    (int bits, int refs) = get_size(cs);
    return cs.slice_split(bits, refs);
}

(slice) Data::skip(slice cs) inline;

(int, int) Data::get_size(slice cs) inline {
    return (64, 0);
}

(slice, slice) Data::load(slice cs) inline {
    return tlb::load(cs, Data::get_size);
}

(slice) Data::_::skip(slice cs) inline {
    cs~skip_bits(64);
    return cs;
}

(slice, [
    int,   ;; id : (uint32)
    int    ;; counter : (uint32)
]) Data::_::parse(slice cs) inline {
    var id = cs~load_uint(32);
    var counter = cs~load_uint(32);
    return (cs, [id, counter]);
}

builder Data::_::store(builder cb, [
    int,   ;; id : (uint32)
    int    ;; counter : (uint32)
] data) inline {
    var [id, counter] = data;
    cb = cb.store_uint(id, 32);
    cb = cb.store_uint(counter, 32);
    return cb;
}

(slice) Data::skip(slice cs) inline {
    if cs~slice_begins_with?(""s) {
        return Data::_::skip(cs);
    }
    return cs;
}

(slice) InternalMsgBody::skip(slice cs) inline;

(int, int) InternalMsgBody::get_size(slice cs) inline {
    return (128, 0);
}

(slice, slice) InternalMsgBody::load(slice cs) inline {
    return tlb::load(cs, InternalMsgBody::get_size);
}

(slice) InternalMsgBody::increase::skip(slice cs) inline {
    cs~skip_bits(96);
    return cs;
}

(slice, [
    int,   ;; query_id : (uint64)
    int    ;; increase_by : (uint32)
]) InternalMsgBody::increase::parse(slice cs) inline {
    var query_id = cs~load_uint(64);
    var increase_by = cs~load_uint(32);
    return (cs, [query_id, increase_by]);
}

builder InternalMsgBody::increase::store(builder cb, [
    int,   ;; query_id : (uint64)
    int    ;; increase_by : (uint32)
] data) inline {
    var [query_id, increase_by] = data;
    cb = cb.store_uint(query_id, 64);
    cb = cb.store_uint(increase_by, 32);
    return cb;
}

(slice) InternalMsgBody::skip(slice cs) inline {
    if cs~slice_begins_with?(op::increase) {
        return InternalMsgBody::increase::skip(cs);
    }
    return cs;
}
